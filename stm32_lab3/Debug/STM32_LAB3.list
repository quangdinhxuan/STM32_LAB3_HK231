
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e74  08002e74  00012e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e98  08002e98  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002e98  08002e98  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e98  08002e98  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e9c  08002e9c  00012e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000034  08002ed4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ed4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000087a0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5d  00000000  00000000  00028840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000813  00000000  00000000  0002af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f73  00000000  00000000  0002b763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca98  00000000  00000000  000426d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082550  00000000  00000000  0004f16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a08  00000000  00000000  000d16c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d40c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e5c 	.word	0x08002e5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002e5c 	.word	0x08002e5c

0800014c <subKeyProcess>:
    KeyReg3[i] = NORMAL_STATE;
    TimeOutForKeyPress[i] = 500;
    button_flag[i] = 0;
  }
}
void subKeyProcess(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

  button_flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	2000008c 	.word	0x2000008c

0800016c <isButtonPressed>:

int isButtonPressed(int index){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
  if(button_flag[index] == 1) {
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
    button_flag[index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
  }
  return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	2000008c 	.word	0x2000008c

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e071      	b.n	8000290 <getKeyInput+0xf0>
    KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3c      	ldr	r2, [pc, #240]	; (80002a0 <getKeyInput+0x100>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493b      	ldr	r1, [pc, #236]	; (80002a4 <getKeyInput+0x104>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3a      	ldr	r2, [pc, #232]	; (80002a8 <getKeyInput+0x108>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4936      	ldr	r1, [pc, #216]	; (80002a0 <getKeyInput+0x100>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 80001cc:	4a37      	ldr	r2, [pc, #220]	; (80002ac <getKeyInput+0x10c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d4:	4936      	ldr	r1, [pc, #216]	; (80002b0 <getKeyInput+0x110>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001dc:	4619      	mov	r1, r3
 80001de:	4610      	mov	r0, r2
 80001e0:	f001 fe02 	bl	8001de8 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	4619      	mov	r1, r3
 80001e8:	4a2f      	ldr	r2, [pc, #188]	; (80002a8 <getKeyInput+0x108>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f0:	4a2b      	ldr	r2, [pc, #172]	; (80002a0 <getKeyInput+0x100>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f8:	492a      	ldr	r1, [pc, #168]	; (80002a4 <getKeyInput+0x104>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000200:	429a      	cmp	r2, r3
 8000202:	d142      	bne.n	800028a <getKeyInput+0xea>
 8000204:	4a26      	ldr	r2, [pc, #152]	; (80002a0 <getKeyInput+0x100>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	4926      	ldr	r1, [pc, #152]	; (80002a8 <getKeyInput+0x108>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d138      	bne.n	800028a <getKeyInput+0xea>
      if (KeyReg3[i] != KeyReg2[i]){
 8000218:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <getKeyInput+0x114>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4921      	ldr	r1, [pc, #132]	; (80002a8 <getKeyInput+0x108>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d011      	beq.n	8000250 <getKeyInput+0xb0>
        KeyReg3[i] = KeyReg2[i];
 800022c:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <getKeyInput+0x108>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	491f      	ldr	r1, [pc, #124]	; (80002b4 <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (KeyReg2[i] == PRESSED_STATE) {
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <getKeyInput+0x108>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d120      	bne.n	800028a <getKeyInput+0xea>
          subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <subKeyProcess>
 800024e:	e01c      	b.n	800028a <getKeyInput+0xea>
        }
      } else {
        TimeOutForKeyPress[i]--;
 8000250:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <getKeyInput+0x118>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	1e5a      	subs	r2, r3, #1
 800025a:	4917      	ldr	r1, [pc, #92]	; (80002b8 <getKeyInput+0x118>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (TimeOutForKeyPress[i] == 0){
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <getKeyInput+0x118>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d10d      	bne.n	800028a <getKeyInput+0xea>
          TimeOutForKeyPress[i] = 200;
 800026e:	4a12      	ldr	r2, [pc, #72]	; (80002b8 <getKeyInput+0x118>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	21c8      	movs	r1, #200	; 0xc8
 8000274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          if (KeyReg2[i] == PRESSED_STATE){
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <getKeyInput+0x108>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <getKeyInput+0xea>
            subKeyProcess(i);
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	f7ff ff61 	bl	800014c <subKeyProcess>
  for(int i = 0; i < NUMBER_OF_BUTTONS; i++) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b02      	cmp	r3, #2
 8000294:	dd8a      	ble.n	80001ac <getKeyInput+0xc>
          }
        }
      }
    }
  }
}
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000005c 	.word	0x2000005c
 80002a4:	20000050 	.word	0x20000050
 80002a8:	20000068 	.word	0x20000068
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000074 	.word	0x20000074
 80002b8:	20000080 	.word	0x20000080

080002bc <number_for2led>:
int tmp_yellow = 2;
int tmp_green = 3;

int enable_trigger = 0;

void number_for2led(int duration, int *a, int *b){
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
	*a = duration/10;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <number_for2led+0x44>)
 80002cc:	fb82 1203 	smull	r1, r2, r2, r3
 80002d0:	1092      	asrs	r2, r2, #2
 80002d2:	17db      	asrs	r3, r3, #31
 80002d4:	1ad2      	subs	r2, r2, r3
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	601a      	str	r2, [r3, #0]
	*b = duration%10;
 80002da:	68f9      	ldr	r1, [r7, #12]
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <number_for2led+0x44>)
 80002de:	fb83 2301 	smull	r2, r3, r3, r1
 80002e2:	109a      	asrs	r2, r3, #2
 80002e4:	17cb      	asrs	r3, r1, #31
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	4613      	mov	r3, r2
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	1aca      	subs	r2, r1, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]
}
 80002f6:	bf00      	nop
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	66666667 	.word	0x66666667

08000304 <update_countdown>:

void update_countdown(int mode){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	if (mode == RED_GREEN){
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d116      	bne.n	8000340 <update_countdown+0x3c>
		tmp_red = red_time/100 - 1;
 8000312:	4b29      	ldr	r3, [pc, #164]	; (80003b8 <update_countdown+0xb4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a29      	ldr	r2, [pc, #164]	; (80003bc <update_countdown+0xb8>)
 8000318:	fb82 1203 	smull	r1, r2, r2, r3
 800031c:	1152      	asrs	r2, r2, #5
 800031e:	17db      	asrs	r3, r3, #31
 8000320:	1ad3      	subs	r3, r2, r3
 8000322:	3b01      	subs	r3, #1
 8000324:	4a26      	ldr	r2, [pc, #152]	; (80003c0 <update_countdown+0xbc>)
 8000326:	6013      	str	r3, [r2, #0]
		tmp_green = green_time/100 -1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <update_countdown+0xc0>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a23      	ldr	r2, [pc, #140]	; (80003bc <update_countdown+0xb8>)
 800032e:	fb82 1203 	smull	r1, r2, r2, r3
 8000332:	1152      	asrs	r2, r2, #5
 8000334:	17db      	asrs	r3, r3, #31
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	3b01      	subs	r3, #1
 800033a:	4a23      	ldr	r2, [pc, #140]	; (80003c8 <update_countdown+0xc4>)
 800033c:	6013      	str	r3, [r2, #0]
		tmp_red = red_time/100 - 1;
	}
	else if (mode == YELLOW_RED){
		tmp_yellow = yellow_time/100 - 1;
	}
}
 800033e:	e036      	b.n	80003ae <update_countdown+0xaa>
	else if (mode == RED_YELLOW){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d10b      	bne.n	800035e <update_countdown+0x5a>
		tmp_yellow = yellow_time/100 - 1;
 8000346:	4b21      	ldr	r3, [pc, #132]	; (80003cc <update_countdown+0xc8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <update_countdown+0xb8>)
 800034c:	fb82 1203 	smull	r1, r2, r2, r3
 8000350:	1152      	asrs	r2, r2, #5
 8000352:	17db      	asrs	r3, r3, #31
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	3b01      	subs	r3, #1
 8000358:	4a1d      	ldr	r2, [pc, #116]	; (80003d0 <update_countdown+0xcc>)
 800035a:	6013      	str	r3, [r2, #0]
}
 800035c:	e027      	b.n	80003ae <update_countdown+0xaa>
	else if (mode == GREEN_RED){
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b04      	cmp	r3, #4
 8000362:	d116      	bne.n	8000392 <update_countdown+0x8e>
		tmp_green = green_time/100 - 1;
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <update_countdown+0xc0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a14      	ldr	r2, [pc, #80]	; (80003bc <update_countdown+0xb8>)
 800036a:	fb82 1203 	smull	r1, r2, r2, r3
 800036e:	1152      	asrs	r2, r2, #5
 8000370:	17db      	asrs	r3, r3, #31
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	3b01      	subs	r3, #1
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <update_countdown+0xc4>)
 8000378:	6013      	str	r3, [r2, #0]
		tmp_red = red_time/100 - 1;
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <update_countdown+0xb4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <update_countdown+0xb8>)
 8000380:	fb82 1203 	smull	r1, r2, r2, r3
 8000384:	1152      	asrs	r2, r2, #5
 8000386:	17db      	asrs	r3, r3, #31
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	3b01      	subs	r3, #1
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <update_countdown+0xbc>)
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	e00d      	b.n	80003ae <update_countdown+0xaa>
	else if (mode == YELLOW_RED){
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2b05      	cmp	r3, #5
 8000396:	d10a      	bne.n	80003ae <update_countdown+0xaa>
		tmp_yellow = yellow_time/100 - 1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <update_countdown+0xc8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a07      	ldr	r2, [pc, #28]	; (80003bc <update_countdown+0xb8>)
 800039e:	fb82 1203 	smull	r1, r2, r2, r3
 80003a2:	1152      	asrs	r2, r2, #5
 80003a4:	17db      	asrs	r3, r3, #31
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <update_countdown+0xcc>)
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000098 	.word	0x20000098
 80003bc:	51eb851f 	.word	0x51eb851f
 80003c0:	20000014 	.word	0x20000014
 80003c4:	200000a0 	.word	0x200000a0
 80003c8:	2000001c 	.word	0x2000001c
 80003cc:	2000009c 	.word	0x2000009c
 80003d0:	20000018 	.word	0x20000018

080003d4 <enablechange>:

void enablechange(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	if (timer_flag[1] == 1){
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <enablechange+0x38>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d112      	bne.n	8000406 <enablechange+0x32>
		if (enable_trigger == 1) enable_trigger = 0;
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <enablechange+0x3c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d103      	bne.n	80003f0 <enablechange+0x1c>
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <enablechange+0x3c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	e006      	b.n	80003fe <enablechange+0x2a>
		else if (enable_trigger == 0) enable_trigger = 1;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <enablechange+0x3c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d102      	bne.n	80003fe <enablechange+0x2a>
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <enablechange+0x3c>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	601a      	str	r2, [r3, #0]
		setTimer(1,50);
 80003fe:	2132      	movs	r1, #50	; 0x32
 8000400:	2001      	movs	r0, #1
 8000402:	f001 f8d7 	bl	80015b4 <setTimer>
	}
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000100 	.word	0x20000100
 8000410:	200000a4 	.word	0x200000a4

08000414 <timeforhor>:



void timeforhor(int num0, int num1){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	if (enable_trigger == 0){
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <timeforhor+0x58>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10d      	bne.n	8000442 <timeforhor+0x2e>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2102      	movs	r1, #2
 800042a:	4811      	ldr	r0, [pc, #68]	; (8000470 <timeforhor+0x5c>)
 800042c:	f001 fcf3 	bl	8001e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2104      	movs	r1, #4
 8000434:	480e      	ldr	r0, [pc, #56]	; (8000470 <timeforhor+0x5c>)
 8000436:	f001 fcee 	bl	8001e16 <HAL_GPIO_WritePin>
		display7SEGver(num0);
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f000 fda8 	bl	8000f90 <display7SEGver>
	else if (enable_trigger == 1){
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
		display7SEGver(num1);
	}
}
 8000440:	e010      	b.n	8000464 <timeforhor+0x50>
	else if (enable_trigger == 1){
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <timeforhor+0x58>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d10c      	bne.n	8000464 <timeforhor+0x50>
		HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2102      	movs	r1, #2
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <timeforhor+0x5c>)
 8000450:	f001 fce1 	bl	8001e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2104      	movs	r1, #4
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <timeforhor+0x5c>)
 800045a:	f001 fcdc 	bl	8001e16 <HAL_GPIO_WritePin>
		display7SEGver(num1);
 800045e:	6838      	ldr	r0, [r7, #0]
 8000460:	f000 fd96 	bl	8000f90 <display7SEGver>
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000a4 	.word	0x200000a4
 8000470:	40010800 	.word	0x40010800

08000474 <timeforver>:
void timeforver(int num0, int num1){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	if (enable_trigger == 0){
 800047e:	4b13      	ldr	r3, [pc, #76]	; (80004cc <timeforver+0x58>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d10d      	bne.n	80004a2 <timeforver+0x2e>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2108      	movs	r1, #8
 800048a:	4811      	ldr	r0, [pc, #68]	; (80004d0 <timeforver+0x5c>)
 800048c:	f001 fcc3 	bl	8001e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2110      	movs	r1, #16
 8000494:	480e      	ldr	r0, [pc, #56]	; (80004d0 <timeforver+0x5c>)
 8000496:	f001 fcbe 	bl	8001e16 <HAL_GPIO_WritePin>
		display7SEGhor(num0);
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f000 fbea 	bl	8000c74 <display7SEGhor>
	else if (enable_trigger == 1){
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
		display7SEGhor(num1);
	}
}
 80004a0:	e010      	b.n	80004c4 <timeforver+0x50>
	else if (enable_trigger == 1){
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <timeforver+0x58>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10c      	bne.n	80004c4 <timeforver+0x50>
		HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	2108      	movs	r1, #8
 80004ae:	4808      	ldr	r0, [pc, #32]	; (80004d0 <timeforver+0x5c>)
 80004b0:	f001 fcb1 	bl	8001e16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2110      	movs	r1, #16
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <timeforver+0x5c>)
 80004ba:	f001 fcac 	bl	8001e16 <HAL_GPIO_WritePin>
		display7SEGhor(num1);
 80004be:	6838      	ldr	r0, [r7, #0]
 80004c0:	f000 fbd8 	bl	8000c74 <display7SEGhor>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200000a4 	.word	0x200000a4
 80004d0:	40010800 	.word	0x40010800

080004d4 <fsm_automatic_run>:
void fsm_automatic_run(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
	int index0 = 0; // used for 7seg topbottom
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
	int index1 = 0; // used for 7seg topbottom
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
	int index2 = 0; // used for 7seg leftright
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
	int index3 = 0; // used for 7seg leftright
 80004e6:	2300      	movs	r3, #0
 80004e8:	603b      	str	r3, [r7, #0]
	switch(status){
 80004ea:	4ba5      	ldr	r3, [pc, #660]	; (8000780 <fsm_automatic_run+0x2ac>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	f200 8141 	bhi.w	8000778 <fsm_automatic_run+0x2a4>
 80004f6:	a201      	add	r2, pc, #4	; (adr r2, 80004fc <fsm_automatic_run+0x28>)
 80004f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fc:	08000511 	.word	0x08000511
 8000500:	08000541 	.word	0x08000541
 8000504:	080005cf 	.word	0x080005cf
 8000508:	0800065d 	.word	0x0800065d
 800050c:	080006eb 	.word	0x080006eb
	case INIT:
		status = RED_GREEN;
 8000510:	4b9b      	ldr	r3, [pc, #620]	; (8000780 <fsm_automatic_run+0x2ac>)
 8000512:	2202      	movs	r2, #2
 8000514:	601a      	str	r2, [r3, #0]
		update_countdown(RED_GREEN);
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff fef4 	bl	8000304 <update_countdown>
		setTimer(0,green_time); //time duration for 7segleg
 800051c:	4b99      	ldr	r3, [pc, #612]	; (8000784 <fsm_automatic_run+0x2b0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4619      	mov	r1, r3
 8000522:	2000      	movs	r0, #0
 8000524:	f001 f846 	bl	80015b4 <setTimer>
		setTimer(1,50); // time duration for enable trigger
 8000528:	2132      	movs	r1, #50	; 0x32
 800052a:	2001      	movs	r0, #1
 800052c:	f001 f842 	bl	80015b4 <setTimer>
		setTimer(2,100); // time duration for reducing 1 second
 8000530:	2164      	movs	r1, #100	; 0x64
 8000532:	2002      	movs	r0, #2
 8000534:	f001 f83e 	bl	80015b4 <setTimer>

		enable_trigger = 0;
 8000538:	4b93      	ldr	r3, [pc, #588]	; (8000788 <fsm_automatic_run+0x2b4>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
		break;
 800053e:	e11b      	b.n	8000778 <fsm_automatic_run+0x2a4>
	case RED_GREEN:
		set_LED_RED_ver();
 8000540:	f000 fac6 	bl	8000ad0 <set_LED_RED_ver>
		set_LED_GREEN_hor();
 8000544:	f000 fb1e 	bl	8000b84 <set_LED_GREEN_hor>
		if (timer_flag[0] == 1){
 8000548:	4b90      	ldr	r3, [pc, #576]	; (800078c <fsm_automatic_run+0x2b8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d10b      	bne.n	8000568 <fsm_automatic_run+0x94>
			status = RED_YELLOW;
 8000550:	4b8b      	ldr	r3, [pc, #556]	; (8000780 <fsm_automatic_run+0x2ac>)
 8000552:	2203      	movs	r2, #3
 8000554:	601a      	str	r2, [r3, #0]
			setTimer(0,yellow_time);
 8000556:	4b8e      	ldr	r3, [pc, #568]	; (8000790 <fsm_automatic_run+0x2bc>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4619      	mov	r1, r3
 800055c:	2000      	movs	r0, #0
 800055e:	f001 f829 	bl	80015b4 <setTimer>
			update_countdown(RED_YELLOW);
 8000562:	2003      	movs	r0, #3
 8000564:	f7ff fece 	bl	8000304 <update_countdown>
		}

		number_for2led(tmp_red, &index0, &index1);
 8000568:	4b8a      	ldr	r3, [pc, #552]	; (8000794 <fsm_automatic_run+0x2c0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f107 0208 	add.w	r2, r7, #8
 8000570:	f107 010c 	add.w	r1, r7, #12
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff fea1 	bl	80002bc <number_for2led>
		number_for2led(tmp_green, &index2, &index3);
 800057a:	4b87      	ldr	r3, [pc, #540]	; (8000798 <fsm_automatic_run+0x2c4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	463a      	mov	r2, r7
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe9a 	bl	80002bc <number_for2led>
		timeforver(index0, index1);
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff70 	bl	8000474 <timeforver>
		timeforhor(index2, index3);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	683a      	ldr	r2, [r7, #0]
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ff3a 	bl	8000414 <timeforhor>
		enablechange();
 80005a0:	f7ff ff18 	bl	80003d4 <enablechange>
		if (timer_flag[2] == 1){
 80005a4:	4b79      	ldr	r3, [pc, #484]	; (800078c <fsm_automatic_run+0x2b8>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d10d      	bne.n	80005c8 <fsm_automatic_run+0xf4>
			tmp_red--;
 80005ac:	4b79      	ldr	r3, [pc, #484]	; (8000794 <fsm_automatic_run+0x2c0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	4a78      	ldr	r2, [pc, #480]	; (8000794 <fsm_automatic_run+0x2c0>)
 80005b4:	6013      	str	r3, [r2, #0]
			tmp_green--;
 80005b6:	4b78      	ldr	r3, [pc, #480]	; (8000798 <fsm_automatic_run+0x2c4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a76      	ldr	r2, [pc, #472]	; (8000798 <fsm_automatic_run+0x2c4>)
 80005be:	6013      	str	r3, [r2, #0]
			setTimer(2,100);
 80005c0:	2164      	movs	r1, #100	; 0x64
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 fff6 	bl	80015b4 <setTimer>
		}




		button1_work();
 80005c8:	f000 f8ea 	bl	80007a0 <button1_work>
		break;
 80005cc:	e0d4      	b.n	8000778 <fsm_automatic_run+0x2a4>
	case RED_YELLOW:
		set_LED_RED_ver();
 80005ce:	f000 fa7f 	bl	8000ad0 <set_LED_RED_ver>
		set_LED_YELLOW_hor();
 80005d2:	f000 faef 	bl	8000bb4 <set_LED_YELLOW_hor>

		if (timer_flag[0] == 1){
 80005d6:	4b6d      	ldr	r3, [pc, #436]	; (800078c <fsm_automatic_run+0x2b8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d10b      	bne.n	80005f6 <fsm_automatic_run+0x122>
			status =GREEN_RED;
 80005de:	4b68      	ldr	r3, [pc, #416]	; (8000780 <fsm_automatic_run+0x2ac>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	601a      	str	r2, [r3, #0]
			setTimer(0,green_time);
 80005e4:	4b67      	ldr	r3, [pc, #412]	; (8000784 <fsm_automatic_run+0x2b0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 ffe2 	bl	80015b4 <setTimer>
			update_countdown(GREEN_RED);
 80005f0:	2004      	movs	r0, #4
 80005f2:	f7ff fe87 	bl	8000304 <update_countdown>
		}

		number_for2led(tmp_red, &index0, &index1);
 80005f6:	4b67      	ldr	r3, [pc, #412]	; (8000794 <fsm_automatic_run+0x2c0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f107 0208 	add.w	r2, r7, #8
 80005fe:	f107 010c 	add.w	r1, r7, #12
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe5a 	bl	80002bc <number_for2led>
		number_for2led(tmp_yellow, &index2, &index3);
 8000608:	4b64      	ldr	r3, [pc, #400]	; (800079c <fsm_automatic_run+0x2c8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	463a      	mov	r2, r7
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fe53 	bl	80002bc <number_for2led>

		timeforver(index0, index1);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff29 	bl	8000474 <timeforver>
		timeforhor(index2, index3);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fef3 	bl	8000414 <timeforhor>

		enablechange();
 800062e:	f7ff fed1 	bl	80003d4 <enablechange>
		if (timer_flag[2] == 1){
 8000632:	4b56      	ldr	r3, [pc, #344]	; (800078c <fsm_automatic_run+0x2b8>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d10d      	bne.n	8000656 <fsm_automatic_run+0x182>
					tmp_red--;
 800063a:	4b56      	ldr	r3, [pc, #344]	; (8000794 <fsm_automatic_run+0x2c0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3b01      	subs	r3, #1
 8000640:	4a54      	ldr	r2, [pc, #336]	; (8000794 <fsm_automatic_run+0x2c0>)
 8000642:	6013      	str	r3, [r2, #0]
					tmp_yellow--;
 8000644:	4b55      	ldr	r3, [pc, #340]	; (800079c <fsm_automatic_run+0x2c8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a54      	ldr	r2, [pc, #336]	; (800079c <fsm_automatic_run+0x2c8>)
 800064c:	6013      	str	r3, [r2, #0]
					setTimer(2,100);
 800064e:	2164      	movs	r1, #100	; 0x64
 8000650:	2002      	movs	r0, #2
 8000652:	f000 ffaf 	bl	80015b4 <setTimer>
				}


		button1_work();
 8000656:	f000 f8a3 	bl	80007a0 <button1_work>
		break;
 800065a:	e08d      	b.n	8000778 <fsm_automatic_run+0x2a4>
	case GREEN_RED:
		set_LED_GREEN_ver();
 800065c:	f000 fa4e 	bl	8000afc <set_LED_GREEN_ver>
		set_LED_RED_hor();
 8000660:	f000 fa78 	bl	8000b54 <set_LED_RED_hor>
		if (timer_flag[0] == 1){
 8000664:	4b49      	ldr	r3, [pc, #292]	; (800078c <fsm_automatic_run+0x2b8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10b      	bne.n	8000684 <fsm_automatic_run+0x1b0>
			status = YELLOW_RED;
 800066c:	4b44      	ldr	r3, [pc, #272]	; (8000780 <fsm_automatic_run+0x2ac>)
 800066e:	2205      	movs	r2, #5
 8000670:	601a      	str	r2, [r3, #0]
			setTimer(0,yellow_time);
 8000672:	4b47      	ldr	r3, [pc, #284]	; (8000790 <fsm_automatic_run+0x2bc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	2000      	movs	r0, #0
 800067a:	f000 ff9b 	bl	80015b4 <setTimer>
			update_countdown(YELLOW_RED);
 800067e:	2005      	movs	r0, #5
 8000680:	f7ff fe40 	bl	8000304 <update_countdown>
		}

		number_for2led(tmp_green, &index0, &index1);
 8000684:	4b44      	ldr	r3, [pc, #272]	; (8000798 <fsm_automatic_run+0x2c4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f107 0208 	add.w	r2, r7, #8
 800068c:	f107 010c 	add.w	r1, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fe13 	bl	80002bc <number_for2led>
		number_for2led(tmp_red, &index2, &index3);
 8000696:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <fsm_automatic_run+0x2c0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	463a      	mov	r2, r7
 800069c:	1d39      	adds	r1, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe0c 	bl	80002bc <number_for2led>
		timeforver(index0, index1);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fee2 	bl	8000474 <timeforver>
		timeforhor(index2, index3);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	4611      	mov	r1, r2
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff feac 	bl	8000414 <timeforhor>

		enablechange();
 80006bc:	f7ff fe8a 	bl	80003d4 <enablechange>
		if (timer_flag[2] == 1){
 80006c0:	4b32      	ldr	r3, [pc, #200]	; (800078c <fsm_automatic_run+0x2b8>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10d      	bne.n	80006e4 <fsm_automatic_run+0x210>
			tmp_green--;
 80006c8:	4b33      	ldr	r3, [pc, #204]	; (8000798 <fsm_automatic_run+0x2c4>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	4a32      	ldr	r2, [pc, #200]	; (8000798 <fsm_automatic_run+0x2c4>)
 80006d0:	6013      	str	r3, [r2, #0]
			tmp_red--;
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <fsm_automatic_run+0x2c0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a2e      	ldr	r2, [pc, #184]	; (8000794 <fsm_automatic_run+0x2c0>)
 80006da:	6013      	str	r3, [r2, #0]
			setTimer(2,100);
 80006dc:	2164      	movs	r1, #100	; 0x64
 80006de:	2002      	movs	r0, #2
 80006e0:	f000 ff68 	bl	80015b4 <setTimer>
		}


		button1_work();
 80006e4:	f000 f85c 	bl	80007a0 <button1_work>
		break;
 80006e8:	e046      	b.n	8000778 <fsm_automatic_run+0x2a4>
	case YELLOW_RED:
		set_LED_YELLOW_ver();
 80006ea:	f000 fa1d 	bl	8000b28 <set_LED_YELLOW_ver>
		set_LED_RED_hor();
 80006ee:	f000 fa31 	bl	8000b54 <set_LED_RED_hor>
		if (timer_flag[0] == 1){
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <fsm_automatic_run+0x2b8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d10b      	bne.n	8000712 <fsm_automatic_run+0x23e>
			status = RED_GREEN;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <fsm_automatic_run+0x2ac>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	601a      	str	r2, [r3, #0]
			setTimer(0,yellow_time);
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <fsm_automatic_run+0x2bc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	2000      	movs	r0, #0
 8000708:	f000 ff54 	bl	80015b4 <setTimer>
			update_countdown(RED_GREEN);
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff fdf9 	bl	8000304 <update_countdown>
		}

		number_for2led(tmp_yellow, &index0, &index1);
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <fsm_automatic_run+0x2c8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f107 0208 	add.w	r2, r7, #8
 800071a:	f107 010c 	add.w	r1, r7, #12
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fdcc 	bl	80002bc <number_for2led>
		number_for2led(tmp_red, &index2, &index3);
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <fsm_automatic_run+0x2c0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	463a      	mov	r2, r7
 800072a:	1d39      	adds	r1, r7, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fdc5 	bl	80002bc <number_for2led>

		timeforver(index0, index1);
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fe9b 	bl	8000474 <timeforver>
		timeforhor(index2, index3);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fe65 	bl	8000414 <timeforhor>

		enablechange();
 800074a:	f7ff fe43 	bl	80003d4 <enablechange>
		if (timer_flag[2] == 1){
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <fsm_automatic_run+0x2b8>)
 8000750:	689b      	ldr	r3, [r3, #8]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10d      	bne.n	8000772 <fsm_automatic_run+0x29e>
			tmp_yellow--;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <fsm_automatic_run+0x2c8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <fsm_automatic_run+0x2c8>)
 800075e:	6013      	str	r3, [r2, #0]
			tmp_red--;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <fsm_automatic_run+0x2c0>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <fsm_automatic_run+0x2c0>)
 8000768:	6013      	str	r3, [r2, #0]
			setTimer(2,100);
 800076a:	2164      	movs	r1, #100	; 0x64
 800076c:	2002      	movs	r0, #2
 800076e:	f000 ff21 	bl	80015b4 <setTimer>
		}



		button1_work();
 8000772:	f000 f815 	bl	80007a0 <button1_work>
		break;
 8000776:	bf00      	nop

	}
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000020 	.word	0x20000020
 8000784:	200000a0 	.word	0x200000a0
 8000788:	200000a4 	.word	0x200000a4
 800078c:	20000100 	.word	0x20000100
 8000790:	2000009c 	.word	0x2000009c
 8000794:	20000014 	.word	0x20000014
 8000798:	2000001c 	.word	0x2000001c
 800079c:	20000018 	.word	0x20000018

080007a0 <button1_work>:
 *  Created on: Oct 23, 2023
 *      Author: Admin
 */
#include"fsm_manual.h"

void button1_work(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1){
 80007a4:	2000      	movs	r0, #0
 80007a6:	f7ff fce1 	bl	800016c <isButtonPressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d140      	bne.n	8000832 <button1_work+0x92>
		tmp_red = 1;// use for count and set value
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <button1_work+0x98>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
		tmp_yellow= 1;// use for count and set value
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <button1_work+0x9c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
		tmp_green = 1;// use for count and set value
 80007bc:	4b20      	ldr	r3, [pc, #128]	; (8000840 <button1_work+0xa0>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
		reset_LED();
 80007c2:	f000 f95d 	bl	8000a80 <reset_LED>
		setTimer1(50); //time blinky led
 80007c6:	2032      	movs	r0, #50	; 0x32
 80007c8:	f000 ff12 	bl	80015f0 <setTimer1>
		if(status==RED_GREEN||status==RED_YELLOW)status=MAN_RED;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <button1_work+0xa4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d003      	beq.n	80007dc <button1_work+0x3c>
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <button1_work+0xa4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d103      	bne.n	80007e4 <button1_work+0x44>
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <button1_work+0xa4>)
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
		else if (status == MAN_YELLOW) status = MAN_GREEN;
		else if (status == MAN_GREEN) status = INIT;

	}

}
 80007e2:	e026      	b.n	8000832 <button1_work+0x92>
		else if(status==GREEN_RED)status=MAN_GREEN;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <button1_work+0xa4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d103      	bne.n	80007f4 <button1_work+0x54>
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <button1_work+0xa4>)
 80007ee:	220d      	movs	r2, #13
 80007f0:	601a      	str	r2, [r3, #0]
}
 80007f2:	e01e      	b.n	8000832 <button1_work+0x92>
		else if(status==YELLOW_RED)status=MAN_YELLOW;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <button1_work+0xa4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	d103      	bne.n	8000804 <button1_work+0x64>
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <button1_work+0xa4>)
 80007fe:	220e      	movs	r2, #14
 8000800:	601a      	str	r2, [r3, #0]
}
 8000802:	e016      	b.n	8000832 <button1_work+0x92>
		else if (status == MAN_RED) status = MAN_YELLOW;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <button1_work+0xa4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b0c      	cmp	r3, #12
 800080a:	d103      	bne.n	8000814 <button1_work+0x74>
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <button1_work+0xa4>)
 800080e:	220e      	movs	r2, #14
 8000810:	601a      	str	r2, [r3, #0]
}
 8000812:	e00e      	b.n	8000832 <button1_work+0x92>
		else if (status == MAN_YELLOW) status = MAN_GREEN;
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <button1_work+0xa4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b0e      	cmp	r3, #14
 800081a:	d103      	bne.n	8000824 <button1_work+0x84>
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <button1_work+0xa4>)
 800081e:	220d      	movs	r2, #13
 8000820:	601a      	str	r2, [r3, #0]
}
 8000822:	e006      	b.n	8000832 <button1_work+0x92>
		else if (status == MAN_GREEN) status = INIT;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <button1_work+0xa4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b0d      	cmp	r3, #13
 800082a:	d102      	bne.n	8000832 <button1_work+0x92>
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <button1_work+0xa4>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000014 	.word	0x20000014
 800083c:	20000018 	.word	0x20000018
 8000840:	2000001c 	.word	0x2000001c
 8000844:	20000020 	.word	0x20000020

08000848 <button2_work>:

void button2_work(){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1){
 800084c:	2001      	movs	r0, #1
 800084e:	f7ff fc8d 	bl	800016c <isButtonPressed>
 8000852:	4603      	mov	r3, r0
 8000854:	2b01      	cmp	r3, #1
 8000856:	d131      	bne.n	80008bc <button2_work+0x74>
		if (status == MAN_RED){
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <button2_work+0x78>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b0c      	cmp	r3, #12
 800085e:	d10c      	bne.n	800087a <button2_work+0x32>
			tmp_red ++;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <button2_work+0x7c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <button2_work+0x7c>)
 8000868:	6013      	str	r3, [r2, #0]
			if (tmp_red > 99){
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <button2_work+0x7c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b63      	cmp	r3, #99	; 0x63
 8000870:	dd24      	ble.n	80008bc <button2_work+0x74>
				tmp_red = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <button2_work+0x7c>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
			if (tmp_green > 99){
				tmp_green = 0;
			}
		}
	}
}
 8000878:	e020      	b.n	80008bc <button2_work+0x74>
		else if (status == MAN_YELLOW){
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <button2_work+0x78>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b0e      	cmp	r3, #14
 8000880:	d10c      	bne.n	800089c <button2_work+0x54>
			tmp_yellow ++;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <button2_work+0x80>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <button2_work+0x80>)
 800088a:	6013      	str	r3, [r2, #0]
			if (tmp_yellow > 99){
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <button2_work+0x80>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b63      	cmp	r3, #99	; 0x63
 8000892:	dd13      	ble.n	80008bc <button2_work+0x74>
				tmp_yellow = 0;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <button2_work+0x80>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	e00f      	b.n	80008bc <button2_work+0x74>
		else if (status == MAN_GREEN){
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <button2_work+0x78>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b0d      	cmp	r3, #13
 80008a2:	d10b      	bne.n	80008bc <button2_work+0x74>
			tmp_green ++;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <button2_work+0x84>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <button2_work+0x84>)
 80008ac:	6013      	str	r3, [r2, #0]
			if (tmp_green > 99){
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <button2_work+0x84>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b63      	cmp	r3, #99	; 0x63
 80008b4:	dd02      	ble.n	80008bc <button2_work+0x74>
				tmp_green = 0;
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <button2_work+0x84>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000020 	.word	0x20000020
 80008c4:	20000014 	.word	0x20000014
 80008c8:	20000018 	.word	0x20000018
 80008cc:	2000001c 	.word	0x2000001c

080008d0 <button3_work>:


void button3_work(){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if (isButtonPressed(2) == 1){
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff fc49 	bl	800016c <isButtonPressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d122      	bne.n	8000926 <button3_work+0x56>
		if (status == MAN_RED){
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <button3_work+0x5c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b0c      	cmp	r3, #12
 80008e6:	d107      	bne.n	80008f8 <button3_work+0x28>
			red_time = tmp_red*100;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <button3_work+0x60>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2264      	movs	r2, #100	; 0x64
 80008ee:	fb02 f303 	mul.w	r3, r2, r3
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <button3_work+0x64>)
 80008f4:	6013      	str	r3, [r2, #0]
		}
		else if (status == MAN_GREEN){
			green_time = tmp_green*100;
		}
	}
}
 80008f6:	e016      	b.n	8000926 <button3_work+0x56>
		else if (status == MAN_YELLOW){
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <button3_work+0x5c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b0e      	cmp	r3, #14
 80008fe:	d107      	bne.n	8000910 <button3_work+0x40>
			yellow_time = tmp_yellow*100;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <button3_work+0x68>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2264      	movs	r2, #100	; 0x64
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	4a0c      	ldr	r2, [pc, #48]	; (800093c <button3_work+0x6c>)
 800090c:	6013      	str	r3, [r2, #0]
}
 800090e:	e00a      	b.n	8000926 <button3_work+0x56>
		else if (status == MAN_GREEN){
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <button3_work+0x5c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b0d      	cmp	r3, #13
 8000916:	d106      	bne.n	8000926 <button3_work+0x56>
			green_time = tmp_green*100;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <button3_work+0x70>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2264      	movs	r2, #100	; 0x64
 800091e:	fb02 f303 	mul.w	r3, r2, r3
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <button3_work+0x74>)
 8000924:	6013      	str	r3, [r2, #0]
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000020 	.word	0x20000020
 8000930:	20000014 	.word	0x20000014
 8000934:	20000098 	.word	0x20000098
 8000938:	20000018 	.word	0x20000018
 800093c:	2000009c 	.word	0x2000009c
 8000940:	2000001c 	.word	0x2000001c
 8000944:	200000a0 	.word	0x200000a0

08000948 <fsm_manual_run>:





void fsm_manual_run(){
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	int a = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
	int b = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
	switch(status){
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <fsm_manual_run+0x11c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b0e      	cmp	r3, #14
 800095c:	d022      	beq.n	80009a4 <fsm_manual_run+0x5c>
 800095e:	2b0e      	cmp	r3, #14
 8000960:	dc79      	bgt.n	8000a56 <fsm_manual_run+0x10e>
 8000962:	2b0c      	cmp	r3, #12
 8000964:	d002      	beq.n	800096c <fsm_manual_run+0x24>
 8000966:	2b0d      	cmp	r3, #13
 8000968:	d038      	beq.n	80009dc <fsm_manual_run+0x94>
				red_time  = yellow_time + green_time;
			}

		break;
	default:
		break;
 800096a:	e074      	b.n	8000a56 <fsm_manual_run+0x10e>
		blinky_red_led();
 800096c:	f000 f93a 	bl	8000be4 <blinky_red_led>
		number_for2led(tmp_red, &a, &b);
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <fsm_manual_run+0x120>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	463a      	mov	r2, r7
 8000976:	1d39      	adds	r1, r7, #4
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fc9f 	bl	80002bc <number_for2led>
		timeforver(a,b);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd75 	bl	8000474 <timeforver>
		timeforhor(0, 1);
 800098a:	2101      	movs	r1, #1
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fd41 	bl	8000414 <timeforhor>
		enablechange();
 8000992:	f7ff fd1f 	bl	80003d4 <enablechange>
		button1_work();
 8000996:	f7ff ff03 	bl	80007a0 <button1_work>
		button2_work();
 800099a:	f7ff ff55 	bl	8000848 <button2_work>
		button3_work();
 800099e:	f7ff ff97 	bl	80008d0 <button3_work>
		break;
 80009a2:	e05b      	b.n	8000a5c <fsm_manual_run+0x114>
		blinky_yellow_led();
 80009a4:	f000 f94e 	bl	8000c44 <blinky_yellow_led>
		number_for2led(tmp_yellow, &a, &b);
 80009a8:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <fsm_manual_run+0x124>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	463a      	mov	r2, r7
 80009ae:	1d39      	adds	r1, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fc83 	bl	80002bc <number_for2led>
		timeforver(a, b);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fd59 	bl	8000474 <timeforver>
		timeforhor(0, 2);
 80009c2:	2102      	movs	r1, #2
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fd25 	bl	8000414 <timeforhor>
		enablechange();
 80009ca:	f7ff fd03 	bl	80003d4 <enablechange>
		button1_work();
 80009ce:	f7ff fee7 	bl	80007a0 <button1_work>
		button2_work();
 80009d2:	f7ff ff39 	bl	8000848 <button2_work>
		button3_work();
 80009d6:	f7ff ff7b 	bl	80008d0 <button3_work>
		break;
 80009da:	e03f      	b.n	8000a5c <fsm_manual_run+0x114>
		blinky_green_led();
 80009dc:	f000 f91a 	bl	8000c14 <blinky_green_led>
		number_for2led(tmp_green, &a, &b);
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <fsm_manual_run+0x128>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	463a      	mov	r2, r7
 80009e6:	1d39      	adds	r1, r7, #4
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc67 	bl	80002bc <number_for2led>
		timeforver(a, b);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fd3d 	bl	8000474 <timeforver>
		timeforhor(0, 3);
 80009fa:	2103      	movs	r1, #3
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fd09 	bl	8000414 <timeforhor>
		enablechange();
 8000a02:	f7ff fce7 	bl	80003d4 <enablechange>
		button2_work();
 8000a06:	f7ff ff1f 	bl	8000848 <button2_work>
		button3_work();
 8000a0a:	f7ff ff61 	bl	80008d0 <button3_work>
		button1_work();
 8000a0e:	f7ff fec7 	bl	80007a0 <button1_work>
		if (red_time > (yellow_time + green_time)){
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <fsm_manual_run+0x12c>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <fsm_manual_run+0x130>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	441a      	add	r2, r3
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <fsm_manual_run+0x134>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	da07      	bge.n	8000a34 <fsm_manual_run+0xec>
				green_time = red_time-yellow_time;
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <fsm_manual_run+0x134>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <fsm_manual_run+0x12c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <fsm_manual_run+0x130>)
 8000a30:	6013      	str	r3, [r2, #0]
		break;
 8000a32:	e012      	b.n	8000a5a <fsm_manual_run+0x112>
			else if (red_time < (yellow_time + green_time)){
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <fsm_manual_run+0x12c>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <fsm_manual_run+0x130>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <fsm_manual_run+0x134>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dd09      	ble.n	8000a5a <fsm_manual_run+0x112>
				red_time  = yellow_time + green_time;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <fsm_manual_run+0x12c>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <fsm_manual_run+0x130>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <fsm_manual_run+0x134>)
 8000a52:	6013      	str	r3, [r2, #0]
		break;
 8000a54:	e001      	b.n	8000a5a <fsm_manual_run+0x112>
		break;
 8000a56:	bf00      	nop
 8000a58:	e000      	b.n	8000a5c <fsm_manual_run+0x114>
		break;
 8000a5a:	bf00      	nop
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000020 	.word	0x20000020
 8000a68:	20000014 	.word	0x20000014
 8000a6c:	20000018 	.word	0x20000018
 8000a70:	2000001c 	.word	0x2000001c
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	200000a0 	.word	0x200000a0
 8000a7c:	20000098 	.word	0x20000098

08000a80 <reset_LED>:
 *      Author: Admin
 */


#include"led.h"
void reset_LED(){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2120      	movs	r1, #32
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <reset_LED+0x4c>)
 8000a8a:	f001 f9c4 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <reset_LED+0x4c>)
 8000a94:	f001 f9bf 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	; 0x40
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <reset_LED+0x4c>)
 8000a9e:	f001 f9ba 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port,LED_RED1_Pin,GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <reset_LED+0x4c>)
 8000aaa:	f001 f9b4 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port,LED_GREEN1_Pin,GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <reset_LED+0x4c>)
 8000ab6:	f001 f9ae 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port,LED_YELLOW1_Pin,GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <reset_LED+0x4c>)
 8000ac2:	f001 f9a8 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40010800 	.word	0x40010800

08000ad0 <set_LED_RED_ver>:
void set_LED_RED_ver()
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <set_LED_RED_ver+0x28>)
 8000ada:	f001 f99c 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <set_LED_RED_ver+0x28>)
 8000ae4:	f001 f997 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2140      	movs	r1, #64	; 0x40
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <set_LED_RED_ver+0x28>)
 8000aee:	f001 f992 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010800 	.word	0x40010800

08000afc <set_LED_GREEN_ver>:

void set_LED_GREEN_ver(){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2120      	movs	r1, #32
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <set_LED_GREEN_ver+0x28>)
 8000b06:	f001 f986 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <set_LED_GREEN_ver+0x28>)
 8000b10:	f001 f981 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2140      	movs	r1, #64	; 0x40
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <set_LED_GREEN_ver+0x28>)
 8000b1a:	f001 f97c 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010800 	.word	0x40010800

08000b28 <set_LED_YELLOW_ver>:

void set_LED_YELLOW_ver(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port,LED_RED_Pin,GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2120      	movs	r1, #32
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <set_LED_YELLOW_ver+0x28>)
 8000b32:	f001 f970 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin,GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <set_LED_YELLOW_ver+0x28>)
 8000b3c:	f001 f96b 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin,GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <set_LED_YELLOW_ver+0x28>)
 8000b46:	f001 f966 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010800 	.word	0x40010800

08000b54 <set_LED_RED_hor>:
void set_LED_RED_hor()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port,LED_RED1_Pin,GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5e:	4808      	ldr	r0, [pc, #32]	; (8000b80 <set_LED_RED_hor+0x2c>)
 8000b60:	f001 f959 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port,LED_GREEN1_Pin,GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <set_LED_RED_hor+0x2c>)
 8000b6c:	f001 f953 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port,LED_YELLOW1_Pin,GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b76:	4802      	ldr	r0, [pc, #8]	; (8000b80 <set_LED_RED_hor+0x2c>)
 8000b78:	f001 f94d 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40010800 	.word	0x40010800

08000b84 <set_LED_GREEN_hor>:

void set_LED_GREEN_hor(){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port,LED_RED1_Pin,GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	4808      	ldr	r0, [pc, #32]	; (8000bb0 <set_LED_GREEN_hor+0x2c>)
 8000b90:	f001 f941 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port,LED_GREEN1_Pin,GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <set_LED_GREEN_hor+0x2c>)
 8000b9c:	f001 f93b 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port,LED_YELLOW1_Pin,GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba6:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <set_LED_GREEN_hor+0x2c>)
 8000ba8:	f001 f935 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <set_LED_YELLOW_hor>:

void set_LED_YELLOW_hor(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port,LED_RED1_Pin,GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bbe:	4808      	ldr	r0, [pc, #32]	; (8000be0 <set_LED_YELLOW_hor+0x2c>)
 8000bc0:	f001 f929 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port,LED_GREEN1_Pin,GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <set_LED_YELLOW_hor+0x2c>)
 8000bcc:	f001 f923 	bl	8001e16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port,LED_YELLOW1_Pin,GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	4802      	ldr	r0, [pc, #8]	; (8000be0 <set_LED_YELLOW_hor+0x2c>)
 8000bd8:	f001 f91d 	bl	8001e16 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40010800 	.word	0x40010800

08000be4 <blinky_red_led>:
void blinky_red_led(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	if(timer_flag[3]==1){
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <blinky_red_led+0x28>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10b      	bne.n	8000c08 <blinky_red_led+0x24>
	setTimer1(50);
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f000 fcfd 	bl	80015f0 <setTimer1>
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin);
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <blinky_red_led+0x2c>)
 8000bfa:	f001 f924 	bl	8001e46 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port,LED_RED1_Pin);
 8000bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c02:	4803      	ldr	r0, [pc, #12]	; (8000c10 <blinky_red_led+0x2c>)
 8000c04:	f001 f91f 	bl	8001e46 <HAL_GPIO_TogglePin>
	}
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000100 	.word	0x20000100
 8000c10:	40010800 	.word	0x40010800

08000c14 <blinky_green_led>:
void blinky_green_led(){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	if(timer_flag[3]==1){
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <blinky_green_led+0x28>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d10b      	bne.n	8000c38 <blinky_green_led+0x24>
		setTimer1(50);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f000 fce5 	bl	80015f0 <setTimer1>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <blinky_green_led+0x2c>)
 8000c2a:	f001 f90c 	bl	8001e46 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port,LED_GREEN1_Pin);
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <blinky_green_led+0x2c>)
 8000c34:	f001 f907 	bl	8001e46 <HAL_GPIO_TogglePin>
		}
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000100 	.word	0x20000100
 8000c40:	40010800 	.word	0x40010800

08000c44 <blinky_yellow_led>:
void blinky_yellow_led(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	if(timer_flag[3]==1){
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <blinky_yellow_led+0x28>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d10b      	bne.n	8000c68 <blinky_yellow_led+0x24>
		setTimer1(50);
 8000c50:	2032      	movs	r0, #50	; 0x32
 8000c52:	f000 fccd 	bl	80015f0 <setTimer1>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port,LED_YELLOW_Pin);
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <blinky_yellow_led+0x2c>)
 8000c5a:	f001 f8f4 	bl	8001e46 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port,LED_YELLOW1_Pin);
 8000c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <blinky_yellow_led+0x2c>)
 8000c64:	f001 f8ef 	bl	8001e46 <HAL_GPIO_TogglePin>
		}
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000100 	.word	0x20000100
 8000c70:	40010800 	.word	0x40010800

08000c74 <display7SEGhor>:
void display7SEGhor(int num){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
     	  switch(num){
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	f200 8180 	bhi.w	8000f84 <display7SEGhor+0x310>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <display7SEGhor+0x18>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000cb5 	.word	0x08000cb5
 8000c90:	08000cfd 	.word	0x08000cfd
 8000c94:	08000d45 	.word	0x08000d45
 8000c98:	08000d8d 	.word	0x08000d8d
 8000c9c:	08000dd5 	.word	0x08000dd5
 8000ca0:	08000e1d 	.word	0x08000e1d
 8000ca4:	08000e65 	.word	0x08000e65
 8000ca8:	08000ead 	.word	0x08000ead
 8000cac:	08000ef5 	.word	0x08000ef5
 8000cb0:	08000f3d 	.word	0x08000f3d
     	  	  	case 0:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	48b4      	ldr	r0, [pc, #720]	; (8000f8c <display7SEGhor+0x318>)
 8000cba:	f001 f8ac 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	48b2      	ldr	r0, [pc, #712]	; (8000f8c <display7SEGhor+0x318>)
 8000cc4:	f001 f8a7 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	48af      	ldr	r0, [pc, #700]	; (8000f8c <display7SEGhor+0x318>)
 8000cce:	f001 f8a2 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2108      	movs	r1, #8
 8000cd6:	48ad      	ldr	r0, [pc, #692]	; (8000f8c <display7SEGhor+0x318>)
 8000cd8:	f001 f89d 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2110      	movs	r1, #16
 8000ce0:	48aa      	ldr	r0, [pc, #680]	; (8000f8c <display7SEGhor+0x318>)
 8000ce2:	f001 f898 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2120      	movs	r1, #32
 8000cea:	48a8      	ldr	r0, [pc, #672]	; (8000f8c <display7SEGhor+0x318>)
 8000cec:	f001 f893 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2140      	movs	r1, #64	; 0x40
 8000cf4:	48a5      	ldr	r0, [pc, #660]	; (8000f8c <display7SEGhor+0x318>)
 8000cf6:	f001 f88e 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000cfa:	e143      	b.n	8000f84 <display7SEGhor+0x310>
     	  		case 1:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2101      	movs	r1, #1
 8000d00:	48a2      	ldr	r0, [pc, #648]	; (8000f8c <display7SEGhor+0x318>)
 8000d02:	f001 f888 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2102      	movs	r1, #2
 8000d0a:	48a0      	ldr	r0, [pc, #640]	; (8000f8c <display7SEGhor+0x318>)
 8000d0c:	f001 f883 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2104      	movs	r1, #4
 8000d14:	489d      	ldr	r0, [pc, #628]	; (8000f8c <display7SEGhor+0x318>)
 8000d16:	f001 f87e 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	489b      	ldr	r0, [pc, #620]	; (8000f8c <display7SEGhor+0x318>)
 8000d20:	f001 f879 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	4898      	ldr	r0, [pc, #608]	; (8000f8c <display7SEGhor+0x318>)
 8000d2a:	f001 f874 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2120      	movs	r1, #32
 8000d32:	4896      	ldr	r0, [pc, #600]	; (8000f8c <display7SEGhor+0x318>)
 8000d34:	f001 f86f 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2140      	movs	r1, #64	; 0x40
 8000d3c:	4893      	ldr	r0, [pc, #588]	; (8000f8c <display7SEGhor+0x318>)
 8000d3e:	f001 f86a 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000d42:	e11f      	b.n	8000f84 <display7SEGhor+0x310>
     	  		case 2:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2101      	movs	r1, #1
 8000d48:	4890      	ldr	r0, [pc, #576]	; (8000f8c <display7SEGhor+0x318>)
 8000d4a:	f001 f864 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	488e      	ldr	r0, [pc, #568]	; (8000f8c <display7SEGhor+0x318>)
 8000d54:	f001 f85f 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	488b      	ldr	r0, [pc, #556]	; (8000f8c <display7SEGhor+0x318>)
 8000d5e:	f001 f85a 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	4889      	ldr	r0, [pc, #548]	; (8000f8c <display7SEGhor+0x318>)
 8000d68:	f001 f855 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4886      	ldr	r0, [pc, #536]	; (8000f8c <display7SEGhor+0x318>)
 8000d72:	f001 f850 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2120      	movs	r1, #32
 8000d7a:	4884      	ldr	r0, [pc, #528]	; (8000f8c <display7SEGhor+0x318>)
 8000d7c:	f001 f84b 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4881      	ldr	r0, [pc, #516]	; (8000f8c <display7SEGhor+0x318>)
 8000d86:	f001 f846 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000d8a:	e0fb      	b.n	8000f84 <display7SEGhor+0x310>
     	  		case 3:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2101      	movs	r1, #1
 8000d90:	487e      	ldr	r0, [pc, #504]	; (8000f8c <display7SEGhor+0x318>)
 8000d92:	f001 f840 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2102      	movs	r1, #2
 8000d9a:	487c      	ldr	r0, [pc, #496]	; (8000f8c <display7SEGhor+0x318>)
 8000d9c:	f001 f83b 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2104      	movs	r1, #4
 8000da4:	4879      	ldr	r0, [pc, #484]	; (8000f8c <display7SEGhor+0x318>)
 8000da6:	f001 f836 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2108      	movs	r1, #8
 8000dae:	4877      	ldr	r0, [pc, #476]	; (8000f8c <display7SEGhor+0x318>)
 8000db0:	f001 f831 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	4874      	ldr	r0, [pc, #464]	; (8000f8c <display7SEGhor+0x318>)
 8000dba:	f001 f82c 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	4872      	ldr	r0, [pc, #456]	; (8000f8c <display7SEGhor+0x318>)
 8000dc4:	f001 f827 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	486f      	ldr	r0, [pc, #444]	; (8000f8c <display7SEGhor+0x318>)
 8000dce:	f001 f822 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000dd2:	e0d7      	b.n	8000f84 <display7SEGhor+0x310>
     	  		case 4:
     		  		  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	486c      	ldr	r0, [pc, #432]	; (8000f8c <display7SEGhor+0x318>)
 8000dda:	f001 f81c 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2102      	movs	r1, #2
 8000de2:	486a      	ldr	r0, [pc, #424]	; (8000f8c <display7SEGhor+0x318>)
 8000de4:	f001 f817 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2104      	movs	r1, #4
 8000dec:	4867      	ldr	r0, [pc, #412]	; (8000f8c <display7SEGhor+0x318>)
 8000dee:	f001 f812 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2108      	movs	r1, #8
 8000df6:	4865      	ldr	r0, [pc, #404]	; (8000f8c <display7SEGhor+0x318>)
 8000df8:	f001 f80d 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	2110      	movs	r1, #16
 8000e00:	4862      	ldr	r0, [pc, #392]	; (8000f8c <display7SEGhor+0x318>)
 8000e02:	f001 f808 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2120      	movs	r1, #32
 8000e0a:	4860      	ldr	r0, [pc, #384]	; (8000f8c <display7SEGhor+0x318>)
 8000e0c:	f001 f803 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2140      	movs	r1, #64	; 0x40
 8000e14:	485d      	ldr	r0, [pc, #372]	; (8000f8c <display7SEGhor+0x318>)
 8000e16:	f000 fffe 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000e1a:	e0b3      	b.n	8000f84 <display7SEGhor+0x310>
     			case 5:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	485a      	ldr	r0, [pc, #360]	; (8000f8c <display7SEGhor+0x318>)
 8000e22:	f000 fff8 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2102      	movs	r1, #2
 8000e2a:	4858      	ldr	r0, [pc, #352]	; (8000f8c <display7SEGhor+0x318>)
 8000e2c:	f000 fff3 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2104      	movs	r1, #4
 8000e34:	4855      	ldr	r0, [pc, #340]	; (8000f8c <display7SEGhor+0x318>)
 8000e36:	f000 ffee 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4853      	ldr	r0, [pc, #332]	; (8000f8c <display7SEGhor+0x318>)
 8000e40:	f000 ffe9 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2110      	movs	r1, #16
 8000e48:	4850      	ldr	r0, [pc, #320]	; (8000f8c <display7SEGhor+0x318>)
 8000e4a:	f000 ffe4 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2120      	movs	r1, #32
 8000e52:	484e      	ldr	r0, [pc, #312]	; (8000f8c <display7SEGhor+0x318>)
 8000e54:	f000 ffdf 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	484b      	ldr	r0, [pc, #300]	; (8000f8c <display7SEGhor+0x318>)
 8000e5e:	f000 ffda 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000e62:	e08f      	b.n	8000f84 <display7SEGhor+0x310>
     			case 6:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2101      	movs	r1, #1
 8000e68:	4848      	ldr	r0, [pc, #288]	; (8000f8c <display7SEGhor+0x318>)
 8000e6a:	f000 ffd4 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2102      	movs	r1, #2
 8000e72:	4846      	ldr	r0, [pc, #280]	; (8000f8c <display7SEGhor+0x318>)
 8000e74:	f000 ffcf 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4843      	ldr	r0, [pc, #268]	; (8000f8c <display7SEGhor+0x318>)
 8000e7e:	f000 ffca 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2108      	movs	r1, #8
 8000e86:	4841      	ldr	r0, [pc, #260]	; (8000f8c <display7SEGhor+0x318>)
 8000e88:	f000 ffc5 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2110      	movs	r1, #16
 8000e90:	483e      	ldr	r0, [pc, #248]	; (8000f8c <display7SEGhor+0x318>)
 8000e92:	f000 ffc0 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	483c      	ldr	r0, [pc, #240]	; (8000f8c <display7SEGhor+0x318>)
 8000e9c:	f000 ffbb 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	4839      	ldr	r0, [pc, #228]	; (8000f8c <display7SEGhor+0x318>)
 8000ea6:	f000 ffb6 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000eaa:	e06b      	b.n	8000f84 <display7SEGhor+0x310>
     			case 7:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4836      	ldr	r0, [pc, #216]	; (8000f8c <display7SEGhor+0x318>)
 8000eb2:	f000 ffb0 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4834      	ldr	r0, [pc, #208]	; (8000f8c <display7SEGhor+0x318>)
 8000ebc:	f000 ffab 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <display7SEGhor+0x318>)
 8000ec6:	f000 ffa6 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000eca:	2201      	movs	r2, #1
 8000ecc:	2108      	movs	r1, #8
 8000ece:	482f      	ldr	r0, [pc, #188]	; (8000f8c <display7SEGhor+0x318>)
 8000ed0:	f000 ffa1 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	482c      	ldr	r0, [pc, #176]	; (8000f8c <display7SEGhor+0x318>)
 8000eda:	f000 ff9c 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	482a      	ldr	r0, [pc, #168]	; (8000f8c <display7SEGhor+0x318>)
 8000ee4:	f000 ff97 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2140      	movs	r1, #64	; 0x40
 8000eec:	4827      	ldr	r0, [pc, #156]	; (8000f8c <display7SEGhor+0x318>)
 8000eee:	f000 ff92 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000ef2:	e047      	b.n	8000f84 <display7SEGhor+0x310>
     			case 8:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4824      	ldr	r0, [pc, #144]	; (8000f8c <display7SEGhor+0x318>)
 8000efa:	f000 ff8c 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2102      	movs	r1, #2
 8000f02:	4822      	ldr	r0, [pc, #136]	; (8000f8c <display7SEGhor+0x318>)
 8000f04:	f000 ff87 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	481f      	ldr	r0, [pc, #124]	; (8000f8c <display7SEGhor+0x318>)
 8000f0e:	f000 ff82 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2108      	movs	r1, #8
 8000f16:	481d      	ldr	r0, [pc, #116]	; (8000f8c <display7SEGhor+0x318>)
 8000f18:	f000 ff7d 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	481a      	ldr	r0, [pc, #104]	; (8000f8c <display7SEGhor+0x318>)
 8000f22:	f000 ff78 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <display7SEGhor+0x318>)
 8000f2c:	f000 ff73 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4815      	ldr	r0, [pc, #84]	; (8000f8c <display7SEGhor+0x318>)
 8000f36:	f000 ff6e 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000f3a:	e023      	b.n	8000f84 <display7SEGhor+0x310>
     			case 9:
     				  HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4812      	ldr	r0, [pc, #72]	; (8000f8c <display7SEGhor+0x318>)
 8000f42:	f000 ff68 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4810      	ldr	r0, [pc, #64]	; (8000f8c <display7SEGhor+0x318>)
 8000f4c:	f000 ff63 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2104      	movs	r1, #4
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <display7SEGhor+0x318>)
 8000f56:	f000 ff5e 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	480b      	ldr	r0, [pc, #44]	; (8000f8c <display7SEGhor+0x318>)
 8000f60:	f000 ff59 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <display7SEGhor+0x318>)
 8000f6a:	f000 ff54 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2120      	movs	r1, #32
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <display7SEGhor+0x318>)
 8000f74:	f000 ff4f 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <display7SEGhor+0x318>)
 8000f7e:	f000 ff4a 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8000f82:	bf00      	nop

     	  }
       }
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <display7SEGver>:

void display7SEGver(int num){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
     	  switch(num){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	f200 81c9 	bhi.w	8001332 <display7SEGver+0x3a2>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <display7SEGver+0x18>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	08001027 	.word	0x08001027
 8000fb0:	0800107d 	.word	0x0800107d
 8000fb4:	080010d3 	.word	0x080010d3
 8000fb8:	08001129 	.word	0x08001129
 8000fbc:	0800117f 	.word	0x0800117f
 8000fc0:	080011d5 	.word	0x080011d5
 8000fc4:	0800122b 	.word	0x0800122b
 8000fc8:	08001281 	.word	0x08001281
 8000fcc:	080012dd 	.word	0x080012dd
     	  	  	case 0:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd6:	48c0      	ldr	r0, [pc, #768]	; (80012d8 <display7SEGver+0x348>)
 8000fd8:	f000 ff1d 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe2:	48bd      	ldr	r0, [pc, #756]	; (80012d8 <display7SEGver+0x348>)
 8000fe4:	f000 ff17 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fee:	48ba      	ldr	r0, [pc, #744]	; (80012d8 <display7SEGver+0x348>)
 8000ff0:	f000 ff11 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	48b7      	ldr	r0, [pc, #732]	; (80012d8 <display7SEGver+0x348>)
 8000ffc:	f000 ff0b 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	48b4      	ldr	r0, [pc, #720]	; (80012d8 <display7SEGver+0x348>)
 8001008:	f000 ff05 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001012:	48b1      	ldr	r0, [pc, #708]	; (80012d8 <display7SEGver+0x348>)
 8001014:	f000 feff 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8001018:	2201      	movs	r2, #1
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	48ae      	ldr	r0, [pc, #696]	; (80012d8 <display7SEGver+0x348>)
 8001020:	f000 fef9 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8001024:	e185      	b.n	8001332 <display7SEGver+0x3a2>
     	  		case 1:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	48aa      	ldr	r0, [pc, #680]	; (80012d8 <display7SEGver+0x348>)
 800102e:	f000 fef2 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001038:	48a7      	ldr	r0, [pc, #668]	; (80012d8 <display7SEGver+0x348>)
 800103a:	f000 feec 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	48a4      	ldr	r0, [pc, #656]	; (80012d8 <display7SEGver+0x348>)
 8001046:	f000 fee6 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001050:	48a1      	ldr	r0, [pc, #644]	; (80012d8 <display7SEGver+0x348>)
 8001052:	f000 fee0 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105c:	489e      	ldr	r0, [pc, #632]	; (80012d8 <display7SEGver+0x348>)
 800105e:	f000 feda 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	489b      	ldr	r0, [pc, #620]	; (80012d8 <display7SEGver+0x348>)
 800106a:	f000 fed4 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001074:	4898      	ldr	r0, [pc, #608]	; (80012d8 <display7SEGver+0x348>)
 8001076:	f000 fece 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 800107a:	e15a      	b.n	8001332 <display7SEGver+0x3a2>
     	  		case 2:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001082:	4895      	ldr	r0, [pc, #596]	; (80012d8 <display7SEGver+0x348>)
 8001084:	f000 fec7 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108e:	4892      	ldr	r0, [pc, #584]	; (80012d8 <display7SEGver+0x348>)
 8001090:	f000 fec1 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109a:	488f      	ldr	r0, [pc, #572]	; (80012d8 <display7SEGver+0x348>)
 800109c:	f000 febb 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a6:	488c      	ldr	r0, [pc, #560]	; (80012d8 <display7SEGver+0x348>)
 80010a8:	f000 feb5 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b2:	4889      	ldr	r0, [pc, #548]	; (80012d8 <display7SEGver+0x348>)
 80010b4:	f000 feaf 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4886      	ldr	r0, [pc, #536]	; (80012d8 <display7SEGver+0x348>)
 80010c0:	f000 fea9 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010ca:	4883      	ldr	r0, [pc, #524]	; (80012d8 <display7SEGver+0x348>)
 80010cc:	f000 fea3 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 80010d0:	e12f      	b.n	8001332 <display7SEGver+0x3a2>
     	  		case 3:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	487f      	ldr	r0, [pc, #508]	; (80012d8 <display7SEGver+0x348>)
 80010da:	f000 fe9c 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e4:	487c      	ldr	r0, [pc, #496]	; (80012d8 <display7SEGver+0x348>)
 80010e6:	f000 fe96 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f0:	4879      	ldr	r0, [pc, #484]	; (80012d8 <display7SEGver+0x348>)
 80010f2:	f000 fe90 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fc:	4876      	ldr	r0, [pc, #472]	; (80012d8 <display7SEGver+0x348>)
 80010fe:	f000 fe8a 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001108:	4873      	ldr	r0, [pc, #460]	; (80012d8 <display7SEGver+0x348>)
 800110a:	f000 fe84 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 800110e:	2201      	movs	r2, #1
 8001110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001114:	4870      	ldr	r0, [pc, #448]	; (80012d8 <display7SEGver+0x348>)
 8001116:	f000 fe7e 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001120:	486d      	ldr	r0, [pc, #436]	; (80012d8 <display7SEGver+0x348>)
 8001122:	f000 fe78 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8001126:	e104      	b.n	8001332 <display7SEGver+0x3a2>
     	  		case 4:
     		  		  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112e:	486a      	ldr	r0, [pc, #424]	; (80012d8 <display7SEGver+0x348>)
 8001130:	f000 fe71 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4867      	ldr	r0, [pc, #412]	; (80012d8 <display7SEGver+0x348>)
 800113c:	f000 fe6b 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001146:	4864      	ldr	r0, [pc, #400]	; (80012d8 <display7SEGver+0x348>)
 8001148:	f000 fe65 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001152:	4861      	ldr	r0, [pc, #388]	; (80012d8 <display7SEGver+0x348>)
 8001154:	f000 fe5f 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115e:	485e      	ldr	r0, [pc, #376]	; (80012d8 <display7SEGver+0x348>)
 8001160:	f000 fe59 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800116a:	485b      	ldr	r0, [pc, #364]	; (80012d8 <display7SEGver+0x348>)
 800116c:	f000 fe53 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001176:	4858      	ldr	r0, [pc, #352]	; (80012d8 <display7SEGver+0x348>)
 8001178:	f000 fe4d 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 800117c:	e0d9      	b.n	8001332 <display7SEGver+0x3a2>
     			case 5:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001184:	4854      	ldr	r0, [pc, #336]	; (80012d8 <display7SEGver+0x348>)
 8001186:	f000 fe46 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001190:	4851      	ldr	r0, [pc, #324]	; (80012d8 <display7SEGver+0x348>)
 8001192:	f000 fe40 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119c:	484e      	ldr	r0, [pc, #312]	; (80012d8 <display7SEGver+0x348>)
 800119e:	f000 fe3a 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a8:	484b      	ldr	r0, [pc, #300]	; (80012d8 <display7SEGver+0x348>)
 80011aa:	f000 fe34 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b4:	4848      	ldr	r0, [pc, #288]	; (80012d8 <display7SEGver+0x348>)
 80011b6:	f000 fe2e 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4845      	ldr	r0, [pc, #276]	; (80012d8 <display7SEGver+0x348>)
 80011c2:	f000 fe28 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011cc:	4842      	ldr	r0, [pc, #264]	; (80012d8 <display7SEGver+0x348>)
 80011ce:	f000 fe22 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 80011d2:	e0ae      	b.n	8001332 <display7SEGver+0x3a2>
     			case 6:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	483f      	ldr	r0, [pc, #252]	; (80012d8 <display7SEGver+0x348>)
 80011dc:	f000 fe1b 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e6:	483c      	ldr	r0, [pc, #240]	; (80012d8 <display7SEGver+0x348>)
 80011e8:	f000 fe15 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f2:	4839      	ldr	r0, [pc, #228]	; (80012d8 <display7SEGver+0x348>)
 80011f4:	f000 fe0f 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011fe:	4836      	ldr	r0, [pc, #216]	; (80012d8 <display7SEGver+0x348>)
 8001200:	f000 fe09 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120a:	4833      	ldr	r0, [pc, #204]	; (80012d8 <display7SEGver+0x348>)
 800120c:	f000 fe03 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001216:	4830      	ldr	r0, [pc, #192]	; (80012d8 <display7SEGver+0x348>)
 8001218:	f000 fdfd 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	482d      	ldr	r0, [pc, #180]	; (80012d8 <display7SEGver+0x348>)
 8001224:	f000 fdf7 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8001228:	e083      	b.n	8001332 <display7SEGver+0x3a2>
     			case 7:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <display7SEGver+0x348>)
 8001232:	f000 fdf0 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123c:	4826      	ldr	r0, [pc, #152]	; (80012d8 <display7SEGver+0x348>)
 800123e:	f000 fdea 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001248:	4823      	ldr	r0, [pc, #140]	; (80012d8 <display7SEGver+0x348>)
 800124a:	f000 fde4 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, SET);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <display7SEGver+0x348>)
 8001256:	f000 fdde 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001260:	481d      	ldr	r0, [pc, #116]	; (80012d8 <display7SEGver+0x348>)
 8001262:	f000 fdd8 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126c:	481a      	ldr	r0, [pc, #104]	; (80012d8 <display7SEGver+0x348>)
 800126e:	f000 fdd2 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, SET);
 8001272:	2201      	movs	r2, #1
 8001274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001278:	4817      	ldr	r0, [pc, #92]	; (80012d8 <display7SEGver+0x348>)
 800127a:	f000 fdcc 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 800127e:	e058      	b.n	8001332 <display7SEGver+0x3a2>
     			case 8:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <display7SEGver+0x348>)
 8001288:	f000 fdc5 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <display7SEGver+0x348>)
 8001294:	f000 fdbf 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <display7SEGver+0x348>)
 80012a0:	f000 fdb9 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012aa:	480b      	ldr	r0, [pc, #44]	; (80012d8 <display7SEGver+0x348>)
 80012ac:	f000 fdb3 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <display7SEGver+0x348>)
 80012b8:	f000 fdad 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <display7SEGver+0x348>)
 80012c4:	f000 fda7 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ce:	4802      	ldr	r0, [pc, #8]	; (80012d8 <display7SEGver+0x348>)
 80012d0:	f000 fda1 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 80012d4:	e02d      	b.n	8001332 <display7SEGver+0x3a2>
 80012d6:	bf00      	nop
 80012d8:	40010c00 	.word	0x40010c00
     			case 9:
     				  HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <display7SEGver+0x3ac>)
 80012e4:	f000 fd97 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <display7SEGver+0x3ac>)
 80012f0:	f000 fd91 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fa:	4810      	ldr	r0, [pc, #64]	; (800133c <display7SEGver+0x3ac>)
 80012fc:	f000 fd8b 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <display7SEGver+0x3ac>)
 8001308:	f000 fd85 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, SET);
 800130c:	2201      	movs	r2, #1
 800130e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <display7SEGver+0x3ac>)
 8001314:	f000 fd7f 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <display7SEGver+0x3ac>)
 8001320:	f000 fd79 	bl	8001e16 <HAL_GPIO_WritePin>
     				  HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <display7SEGver+0x3ac>)
 800132c:	f000 fd73 	bl	8001e16 <HAL_GPIO_WritePin>
     				  break;
 8001330:	bf00      	nop

     	  }
       }
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40010c00 	.word	0x40010c00

08001340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001344:	f000 fa64 	bl	8001810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001348:	f000 f820 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134c:	f000 f8a6 	bl	800149c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001350:	f000 f858 	bl	8001404 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <main+0x3c>)
 8001356:	f001 f9bd 	bl	80026d4 <HAL_TIM_Base_Start_IT>
  red_time = 500;
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <main+0x40>)
 800135c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001360:	601a      	str	r2, [r3, #0]
  yellow_time = 200;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <main+0x44>)
 8001364:	22c8      	movs	r2, #200	; 0xc8
 8001366:	601a      	str	r2, [r3, #0]
  green_time = 300;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <main+0x48>)
 800136a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800136e:	601a      	str	r2, [r3, #0]
  {




	  fsm_automatic_run();
 8001370:	f7ff f8b0 	bl	80004d4 <fsm_automatic_run>
	  fsm_manual_run();
 8001374:	f7ff fae8 	bl	8000948 <fsm_manual_run>
	  fsm_automatic_run();
 8001378:	e7fa      	b.n	8001370 <main+0x30>
 800137a:	bf00      	nop
 800137c:	200000a8 	.word	0x200000a8
 8001380:	20000098 	.word	0x20000098
 8001384:	2000009c 	.word	0x2000009c
 8001388:	200000a0 	.word	0x200000a0

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b090      	sub	sp, #64	; 0x40
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	2228      	movs	r2, #40	; 0x28
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fd32 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b2:	2301      	movs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b6:	2310      	movs	r3, #16
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd58 	bl	8001e78 <HAL_RCC_OscConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013ce:	f000 f8ec 	bl	80015aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 ffc6 	bl	800237c <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013f6:	f000 f8d8 	bl	80015aa <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3740      	adds	r7, #64	; 0x40
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <MX_TIM2_Init+0x94>)
 8001422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <MX_TIM2_Init+0x94>)
 800142a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800142e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <MX_TIM2_Init+0x94>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <MX_TIM2_Init+0x94>)
 8001438:	2209      	movs	r2, #9
 800143a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_TIM2_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <MX_TIM2_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <MX_TIM2_Init+0x94>)
 800144a:	f001 f8f3 	bl	8002634 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001454:	f000 f8a9 	bl	80015aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_TIM2_Init+0x94>)
 8001466:	f001 fa89 	bl	800297c <HAL_TIM_ConfigClockSource>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001470:	f000 f89b 	bl	80015aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_TIM2_Init+0x94>)
 8001482:	f001 fc55 	bl	8002d30 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800148c:	f000 f88d 	bl	80015aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200000a8 	.word	0x200000a8

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014b6:	f043 0310 	orr.w	r3, r3, #16
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	607b      	str	r3, [r7, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, en0_Pin|en1_Pin|en2_Pin|en3_Pin
 80014f8:	2200      	movs	r2, #0
 80014fa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80014fe:	481d      	ldr	r0, [pc, #116]	; (8001574 <MX_GPIO_Init+0xd8>)
 8001500:	f000 fc89 	bl	8001e16 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|c1_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	f647 717f 	movw	r1, #32639	; 0x7f7f
 800150a:	481b      	ldr	r0, [pc, #108]	; (8001578 <MX_GPIO_Init+0xdc>)
 800150c:	f000 fc83 	bl	8001e16 <HAL_GPIO_WritePin>
                          |d1_Pin|e1_Pin|f1_Pin|g1_Pin
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |a1_Pin|b1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001510:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	2301      	movs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	4815      	ldr	r0, [pc, #84]	; (800157c <MX_GPIO_Init+0xe0>)
 8001526:	f000 fae3 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : en0_Pin en1_Pin en2_Pin en3_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin */
  GPIO_InitStruct.Pin = en0_Pin|en1_Pin|en2_Pin|en3_Pin
 800152a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800152e:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2302      	movs	r3, #2
 800153a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_GPIO_Init+0xd8>)
 8001544:	f000 fad4 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin c1_Pin
                           d1_Pin e1_Pin f1_Pin g1_Pin
                           d_Pin e_Pin f_Pin g_Pin
                           a1_Pin b1_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|c1_Pin
 8001548:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800154c:	613b      	str	r3, [r7, #16]
                          |d1_Pin|e1_Pin|f1_Pin|g1_Pin
                          |d_Pin|e_Pin|f_Pin|g_Pin
                          |a1_Pin|b1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_GPIO_Init+0xdc>)
 8001562:	f000 fac5 	bl	8001af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40010800 	.word	0x40010800
 8001578:	40010c00 	.word	0x40010c00
 800157c:	40011000 	.word	0x40011000

08001580 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	timerRun(0);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f84b 	bl	8001624 <timerRun>
	timerRun(1);
 800158e:	2001      	movs	r0, #1
 8001590:	f000 f848 	bl	8001624 <timerRun>
	timerRun(2);
 8001594:	2002      	movs	r0, #2
 8001596:	f000 f845 	bl	8001624 <timerRun>
	timerRun1();
 800159a:	f000 f86b 	bl	8001674 <timerRun1>
   getKeyInput();
 800159e:	f7fe fdff 	bl	80001a0 <getKeyInput>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ae:	b672      	cpsid	i
}
 80015b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <Error_Handler+0x8>

080015b4 <setTimer>:
int tick=1;
int timer_counter1=0;
int timer_counter[3]={0,0,0};
int timer_flag[3]={0,0,0};
int timer_flag1=0;
void setTimer(int number, int duration){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	timer_counter[number]=duration/tick;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <setTimer+0x30>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <setTimer+0x34>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[number]=0;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <setTimer+0x38>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2100      	movs	r1, #0
 80015d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000024 	.word	0x20000024
 80015e8:	200000f4 	.word	0x200000f4
 80015ec:	20000100 	.word	0x20000100

080015f0 <setTimer1>:
void setTimer1(int duration){
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	timer_counter1=duration/tick;
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <setTimer1+0x28>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <setTimer1+0x2c>)
 8001604:	6013      	str	r3, [r2, #0]
	timer_flag1=0;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <setTimer1+0x30>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000024 	.word	0x20000024
 800161c:	200000f0 	.word	0x200000f0
 8001620:	2000010c 	.word	0x2000010c

08001624 <timerRun>:

void timerRun(int number){
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(timer_counter[number]>0)
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <timerRun+0x48>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001634:	2b00      	cmp	r3, #0
 8001636:	dd13      	ble.n	8001660 <timerRun+0x3c>
	{
		timer_counter[number]--;
 8001638:	4a0c      	ldr	r2, [pc, #48]	; (800166c <timerRun+0x48>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <timerRun+0x48>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[number]<=0){
 800164a:	4a08      	ldr	r2, [pc, #32]	; (800166c <timerRun+0x48>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dc04      	bgt.n	8001660 <timerRun+0x3c>
			timer_flag[number]=1;
 8001656:	4a06      	ldr	r2, [pc, #24]	; (8001670 <timerRun+0x4c>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2101      	movs	r1, #1
 800165c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200000f4 	.word	0x200000f4
 8001670:	20000100 	.word	0x20000100

08001674 <timerRun1>:
void timerRun1(){
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	if(timer_counter1>0)
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <timerRun1+0x2c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	dd0b      	ble.n	8001698 <timerRun1+0x24>
	{
		timer_counter1--;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <timerRun1+0x2c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	3b01      	subs	r3, #1
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <timerRun1+0x2c>)
 8001688:	6013      	str	r3, [r2, #0]
		if(timer_counter1<=0){
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <timerRun1+0x2c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	dc02      	bgt.n	8001698 <timerRun1+0x24>
			timer_flag1=1;
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <timerRun1+0x30>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	200000f0 	.word	0x200000f0
 80016a4:	2000010c 	.word	0x2000010c

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_MspInit+0x5c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_MspInit+0x5c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6193      	str	r3, [r2, #24]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_MspInit+0x5c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_MspInit+0x5c>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <HAL_MspInit+0x5c>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_MspInit+0x5c>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_MspInit+0x60>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4a04      	ldr	r2, [pc, #16]	; (8001708 <HAL_MspInit+0x60>)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40021000 	.word	0x40021000
 8001708:	40010000 	.word	0x40010000

0800170c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d113      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_TIM_Base_MspInit+0x44>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_TIM_Base_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_TIM_Base_MspInit+0x44>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	201c      	movs	r0, #28
 800173c:	f000 f9a1 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001740:	201c      	movs	r0, #28
 8001742:	f000 f9ba 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179a:	f000 f87f 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM2_IRQHandler+0x10>)
 80017aa:	f000 ffdf 	bl	800276c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200000a8 	.word	0x200000a8

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c4:	f7ff fff8 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c8:	480b      	ldr	r0, [pc, #44]	; (80017f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ca:	490c      	ldr	r1, [pc, #48]	; (80017fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017e0:	4c09      	ldr	r4, [pc, #36]	; (8001808 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ee:	f001 fb11 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff fda5 	bl	8001340 <main>
  bx lr
 80017f6:	4770      	bx	lr
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001800:	08002ea0 	.word	0x08002ea0
  ldr r2, =_sbss
 8001804:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001808:	20000114 	.word	0x20000114

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x28>)
 800181a:	f043 0310 	orr.w	r3, r3, #16
 800181e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f923 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff ff3c 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f93b 	bl	8001ad6 <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f000 f903 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000028 	.word	0x20000028
 8001894:	20000030 	.word	0x20000030
 8001898:	2000002c 	.word	0x2000002c

0800189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x1c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_IncTick+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <HAL_IncTick+0x20>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000030 	.word	0x20000030
 80018bc:	20000110 	.word	0x20000110

080018c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_GetTick+0x10>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	20000110 	.word	0x20000110

080018d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f0:	4013      	ands	r3, r2
 80018f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <__NVIC_SetPriorityGrouping+0x44>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	60d3      	str	r3, [r2, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <__NVIC_GetPriorityGrouping+0x18>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0307 	and.w	r3, r3, #7
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	db0b      	blt.n	8001962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	4906      	ldr	r1, [pc, #24]	; (800196c <__NVIC_EnableIRQ+0x34>)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	095b      	lsrs	r3, r3, #5
 8001958:	2001      	movs	r0, #1
 800195a:	fa00 f202 	lsl.w	r2, r0, r2
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff90 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff2d 	bl	80018d4 <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff42 	bl	800191c <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff90 	bl	80019c4 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5f 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff35 	bl	8001938 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b08b      	sub	sp, #44	; 0x2c
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b02:	e161      	b.n	8001dc8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b04:	2201      	movs	r2, #1
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8150 	bne.w	8001dc2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a97      	ldr	r2, [pc, #604]	; (8001d84 <HAL_GPIO_Init+0x294>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d05e      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b2c:	4a95      	ldr	r2, [pc, #596]	; (8001d84 <HAL_GPIO_Init+0x294>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d875      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b32:	4a95      	ldr	r2, [pc, #596]	; (8001d88 <HAL_GPIO_Init+0x298>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d058      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b38:	4a93      	ldr	r2, [pc, #588]	; (8001d88 <HAL_GPIO_Init+0x298>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d86f      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b3e:	4a93      	ldr	r2, [pc, #588]	; (8001d8c <HAL_GPIO_Init+0x29c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d052      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b44:	4a91      	ldr	r2, [pc, #580]	; (8001d8c <HAL_GPIO_Init+0x29c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d869      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b4a:	4a91      	ldr	r2, [pc, #580]	; (8001d90 <HAL_GPIO_Init+0x2a0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d04c      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b50:	4a8f      	ldr	r2, [pc, #572]	; (8001d90 <HAL_GPIO_Init+0x2a0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d863      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b56:	4a8f      	ldr	r2, [pc, #572]	; (8001d94 <HAL_GPIO_Init+0x2a4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d046      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
 8001b5c:	4a8d      	ldr	r2, [pc, #564]	; (8001d94 <HAL_GPIO_Init+0x2a4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d85d      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d82a      	bhi.n	8001bbc <HAL_GPIO_Init+0xcc>
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d859      	bhi.n	8001c1e <HAL_GPIO_Init+0x12e>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <HAL_GPIO_Init+0x80>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001beb 	.word	0x08001beb
 8001b74:	08001bc5 	.word	0x08001bc5
 8001b78:	08001bd7 	.word	0x08001bd7
 8001b7c:	08001c19 	.word	0x08001c19
 8001b80:	08001c1f 	.word	0x08001c1f
 8001b84:	08001c1f 	.word	0x08001c1f
 8001b88:	08001c1f 	.word	0x08001c1f
 8001b8c:	08001c1f 	.word	0x08001c1f
 8001b90:	08001c1f 	.word	0x08001c1f
 8001b94:	08001c1f 	.word	0x08001c1f
 8001b98:	08001c1f 	.word	0x08001c1f
 8001b9c:	08001c1f 	.word	0x08001c1f
 8001ba0:	08001c1f 	.word	0x08001c1f
 8001ba4:	08001c1f 	.word	0x08001c1f
 8001ba8:	08001c1f 	.word	0x08001c1f
 8001bac:	08001c1f 	.word	0x08001c1f
 8001bb0:	08001c1f 	.word	0x08001c1f
 8001bb4:	08001bcd 	.word	0x08001bcd
 8001bb8:	08001be1 	.word	0x08001be1
 8001bbc:	4a76      	ldr	r2, [pc, #472]	; (8001d98 <HAL_GPIO_Init+0x2a8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bc2:	e02c      	b.n	8001c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e029      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e024      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	3308      	adds	r3, #8
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e01f      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	330c      	adds	r3, #12
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e01a      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e013      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c00:	2308      	movs	r3, #8
 8001c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	611a      	str	r2, [r3, #16]
          break;
 8001c0a:	e009      	b.n	8001c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	615a      	str	r2, [r3, #20]
          break;
 8001c16:	e003      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x130>
          break;
 8001c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	2bff      	cmp	r3, #255	; 0xff
 8001c24:	d801      	bhi.n	8001c2a <HAL_GPIO_Init+0x13a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	e001      	b.n	8001c2e <HAL_GPIO_Init+0x13e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d802      	bhi.n	8001c3c <HAL_GPIO_Init+0x14c>
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	e002      	b.n	8001c42 <HAL_GPIO_Init+0x152>
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	3b08      	subs	r3, #8
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	210f      	movs	r1, #15
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	401a      	ands	r2, r3
 8001c54:	6a39      	ldr	r1, [r7, #32]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80a9 	beq.w	8001dc2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c70:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a49      	ldr	r2, [pc, #292]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2ac>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c88:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <HAL_GPIO_Init+0x2b0>)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <HAL_GPIO_Init+0x2b4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3c      	ldr	r2, [pc, #240]	; (8001da8 <HAL_GPIO_Init+0x2b8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1dc>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3b      	ldr	r2, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x2bc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1d8>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e004      	b.n	8001cd2 <HAL_GPIO_Init+0x1e2>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x1e2>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <HAL_GPIO_Init+0x1e2>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd4:	f002 0203 	and.w	r2, r2, #3
 8001cd8:	0092      	lsls	r2, r2, #2
 8001cda:	4093      	lsls	r3, r2
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce2:	492f      	ldr	r1, [pc, #188]	; (8001da0 <HAL_GPIO_Init+0x2b0>)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3302      	adds	r3, #2
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	492b      	ldr	r1, [pc, #172]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	608b      	str	r3, [r1, #8]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4927      	ldr	r1, [pc, #156]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4921      	ldr	r1, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60cb      	str	r3, [r1, #12]
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	491d      	ldr	r1, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d006      	beq.n	8001d5a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	4917      	ldr	r1, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4913      	ldr	r1, [pc, #76]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01f      	beq.n	8001db4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	490d      	ldr	r1, [pc, #52]	; (8001db0 <HAL_GPIO_Init+0x2c0>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	600b      	str	r3, [r1, #0]
 8001d80:	e01f      	b.n	8001dc2 <HAL_GPIO_Init+0x2d2>
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_GPIO_Init+0x2f4>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4909      	ldr	r1, [pc, #36]	; (8001de4 <HAL_GPIO_Init+0x2f4>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f47f ae96 	bne.w	8001b04 <HAL_GPIO_Init+0x14>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	372c      	adds	r7, #44	; 0x2c
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e001      	b.n	8001e0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]
 8001e22:	4613      	mov	r3, r2
 8001e24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e26:	787b      	ldrb	r3, [r7, #1]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e32:	e003      	b.n	8001e3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e34:	887b      	ldrh	r3, [r7, #2]
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	611a      	str	r2, [r3, #16]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e58:	887a      	ldrh	r2, [r7, #2]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	041a      	lsls	r2, r3, #16
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	887b      	ldrh	r3, [r7, #2]
 8001e66:	400b      	ands	r3, r1
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	611a      	str	r2, [r3, #16]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e272      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8087 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e98:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 030c 	and.w	r3, r3, #12
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d00c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea4:	4b8f      	ldr	r3, [pc, #572]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d112      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebe:	4b89      	ldr	r3, [pc, #548]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d06c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d168      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e24c      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ede:	d106      	bne.n	8001eee <HAL_RCC_OscConfig+0x76>
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a7f      	ldr	r2, [pc, #508]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	e02e      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a77      	ldr	r2, [pc, #476]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0xbc>
 8001f1a:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a71      	ldr	r2, [pc, #452]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6e      	ldr	r2, [pc, #440]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xd4>
 8001f34:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6a      	ldr	r2, [pc, #424]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a67      	ldr	r2, [pc, #412]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fcb4 	bl	80018c0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fcb0 	bl	80018c0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e200      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5d      	ldr	r3, [pc, #372]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe4>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fca0 	bl	80018c0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff fc9c 	bl	80018c0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1ec      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b53      	ldr	r3, [pc, #332]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x10c>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fbe:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c0      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fc55 	bl	80018c0 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff fc51 	bl	80018c0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fc34 	bl	80018c0 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff fc30 	bl	80018c0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e180      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d03a      	beq.n	80020fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fc14 	bl	80018c0 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fc10 	bl	80018c0 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e160      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 fa9c 	bl	80025f8 <RCC_Delay>
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff fbfa 	bl	80018c0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ce:	e00f      	b.n	80020f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff fbf6 	bl	80018c0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e146      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420000 	.word	0x42420000
 80020ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1e9      	bne.n	80020d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a6 	beq.w	8002256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a87      	ldr	r2, [pc, #540]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002132:	2301      	movs	r3, #1
 8002134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	4b82      	ldr	r3, [pc, #520]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213e:	2b00      	cmp	r3, #0
 8002140:	d118      	bne.n	8002174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7e      	ldr	r2, [pc, #504]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214e:	f7ff fbb7 	bl	80018c0 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002156:	f7ff fbb3 	bl	80018c0 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b64      	cmp	r3, #100	; 0x64
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e103      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b75      	ldr	r3, [pc, #468]	; (8002340 <HAL_RCC_OscConfig+0x4c8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0f0      	beq.n	8002156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e02d      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x334>
 8002192:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a66      	ldr	r2, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	e01c      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x356>
 80021b4:	4b61      	ldr	r3, [pc, #388]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a60      	ldr	r2, [pc, #384]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a5d      	ldr	r2, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x36e>
 80021ce:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b58      	ldr	r3, [pc, #352]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a57      	ldr	r2, [pc, #348]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d015      	beq.n	800221a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7ff fb67 	bl	80018c0 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7ff fb63 	bl	80018c0 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	; 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0b1      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220c:	4b4b      	ldr	r3, [pc, #300]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ee      	beq.n	80021f6 <HAL_RCC_OscConfig+0x37e>
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff fb51 	bl	80018c0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002220:	e00a      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7ff fb4d 	bl	80018c0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e09b      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002244:	7dfb      	ldrb	r3, [r7, #23]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d105      	bne.n	8002256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224a:	4b3c      	ldr	r3, [pc, #240]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8087 	beq.w	800236e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 030c 	and.w	r3, r3, #12
 8002268:	2b08      	cmp	r3, #8
 800226a:	d061      	beq.n	8002330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d146      	bne.n	8002302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b33      	ldr	r3, [pc, #204]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff fb21 	bl	80018c0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff fb1d 	bl	80018c0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e06d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4921      	ldr	r1, [pc, #132]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a19      	ldr	r1, [r3, #32]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	430b      	orrs	r3, r1
 80022ce:	491b      	ldr	r1, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7ff faf1 	bl	80018c0 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e2:	f7ff faed 	bl	80018c0 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
 8002300:	e035      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fada 	bl	80018c0 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002310:	f7ff fad6 	bl	80018c0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e026      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x498>
 800232e:	e01e      	b.n	800236e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e019      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
 800233c:	40021000 	.word	0x40021000
 8002340:	40007000 	.word	0x40007000
 8002344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x500>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d0      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4965      	ldr	r1, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d040      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e073      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7ff fa28 	bl	80018c0 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff fa24 	bl	80018c0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e053      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d210      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1cc>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff f986 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	08002e74 	.word	0x08002e74
 8002548:	20000028 	.word	0x20000028
 800254c:	2000002c 	.word	0x2000002c

08002550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x30>
 800257a:	2b08      	cmp	r3, #8
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x36>
 800257e:	e027      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002582:	613b      	str	r3, [r7, #16]
      break;
 8002584:	e027      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	0c9b      	lsrs	r3, r3, #18
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	4a17      	ldr	r2, [pc, #92]	; (80025ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002590:	5cd3      	ldrb	r3, [r2, r3]
 8002592:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	0c5b      	lsrs	r3, r3, #17
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	4a11      	ldr	r2, [pc, #68]	; (80025f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e004      	b.n	80025ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	613b      	str	r3, [r7, #16]
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025d2:	613b      	str	r3, [r7, #16]
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	693b      	ldr	r3, [r7, #16]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	08002e84 	.word	0x08002e84
 80025f0:	08002e94 	.word	0x08002e94
 80025f4:	003d0900 	.word	0x003d0900

080025f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <RCC_Delay+0x34>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <RCC_Delay+0x38>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a5b      	lsrs	r3, r3, #9
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002614:	bf00      	nop
  }
  while (Delay --);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f9      	bne.n	8002614 <RCC_Delay+0x1c>
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000028 	.word	0x20000028
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e041      	b.n	80026ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff f856 	bl	800170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 fa6e 	bl	8002b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d001      	beq.n	80026ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e035      	b.n	8002758 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_TIM_Base_Start_IT+0x90>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_TIM_Base_Start_IT+0x4e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d004      	beq.n	8002722 <HAL_TIM_Base_Start_IT+0x4e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_TIM_Base_Start_IT+0x94>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d111      	bne.n	8002746 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b06      	cmp	r3, #6
 8002732:	d010      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002744:	e007      	b.n	8002756 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40000400 	.word	0x40000400

0800276c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0202 	mvn.w	r2, #2
 8002798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9b4 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f9a7 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f9b6 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0204 	mvn.w	r2, #4
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f98a 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f97d 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f98c 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d122      	bne.n	8002870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b08      	cmp	r3, #8
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0208 	mvn.w	r2, #8
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2204      	movs	r2, #4
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f960 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f953 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f962 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b10      	cmp	r3, #16
 800287c:	d122      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b10      	cmp	r3, #16
 800288a:	d11b      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0210 	mvn.w	r2, #16
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2208      	movs	r2, #8
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f936 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f929 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f938 	bl	8002b2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10e      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0201 	mvn.w	r2, #1
 80028e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fe48 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d10e      	bne.n	800291c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d107      	bne.n	800291c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa6b 	bl	8002df2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d10e      	bne.n	8002948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d107      	bne.n	8002948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8fc 	bl	8002b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b20      	cmp	r3, #32
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b20      	cmp	r3, #32
 8002962:	d107      	bne.n	8002974 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0220 	mvn.w	r2, #32
 800296c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fa36 	bl	8002de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_TIM_ConfigClockSource+0x1c>
 8002994:	2302      	movs	r3, #2
 8002996:	e0b4      	b.n	8002b02 <HAL_TIM_ConfigClockSource+0x186>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d0:	d03e      	beq.n	8002a50 <HAL_TIM_ConfigClockSource+0xd4>
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	f200 8087 	bhi.w	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	f000 8086 	beq.w	8002aee <HAL_TIM_ConfigClockSource+0x172>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	d87f      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b70      	cmp	r3, #112	; 0x70
 80029ea:	d01a      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0xa6>
 80029ec:	2b70      	cmp	r3, #112	; 0x70
 80029ee:	d87b      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b60      	cmp	r3, #96	; 0x60
 80029f2:	d050      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x11a>
 80029f4:	2b60      	cmp	r3, #96	; 0x60
 80029f6:	d877      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b50      	cmp	r3, #80	; 0x50
 80029fa:	d03c      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0xfa>
 80029fc:	2b50      	cmp	r3, #80	; 0x50
 80029fe:	d873      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d058      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x13a>
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d86f      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b30      	cmp	r3, #48	; 0x30
 8002a0a:	d064      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	2b30      	cmp	r3, #48	; 0x30
 8002a0e:	d86b      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d060      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d867      	bhi.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05c      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d05a      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a20:	e062      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a32:	f000 f95e 	bl	8002cf2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	609a      	str	r2, [r3, #8]
      break;
 8002a4e:	e04f      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a60:	f000 f947 	bl	8002cf2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a72:	609a      	str	r2, [r3, #8]
      break;
 8002a74:	e03c      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 f8be 	bl	8002c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2150      	movs	r1, #80	; 0x50
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f915 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 8002a94:	e02c      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f000 f8dc 	bl	8002c60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2160      	movs	r1, #96	; 0x60
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f905 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e01c      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 f89e 	bl	8002c04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2140      	movs	r1, #64	; 0x40
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f8f5 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e00c      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f000 f8ec 	bl	8002cbe <TIM_ITRx_SetConfig>
      break;
 8002ae6:	e003      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e000      	b.n	8002af0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
	...

08002b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <TIM_Base_SetConfig+0xa8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x28>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x28>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a22      	ldr	r2, [pc, #136]	; (8002c00 <TIM_Base_SetConfig+0xac>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	; (8002bfc <TIM_Base_SetConfig+0xa8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <TIM_Base_SetConfig+0x52>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9c:	d003      	beq.n	8002ba6 <TIM_Base_SetConfig+0x52>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <TIM_Base_SetConfig+0xac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <TIM_Base_SetConfig+0xa8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d103      	bne.n	8002bec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	615a      	str	r2, [r3, #20]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400

08002c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 030a 	bic.w	r3, r3, #10
 8002c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f023 0210 	bic.w	r2, r3, #16
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	031b      	lsls	r3, r3, #12
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f043 0307 	orr.w	r3, r3, #7
 8002ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b087      	sub	sp, #28
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	021a      	lsls	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	609a      	str	r2, [r3, #8]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e041      	b.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d004      	beq.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10c      	bne.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40012c00 	.word	0x40012c00
 8002ddc:	40000400 	.word	0x40000400

08002de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <memset>:
 8002e04:	4603      	mov	r3, r0
 8002e06:	4402      	add	r2, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2600      	movs	r6, #0
 8002e18:	4d0c      	ldr	r5, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f000 f81a 	bl	8002e5c <_init>
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4d0a      	ldr	r5, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08002e98 	.word	0x08002e98
 8002e50:	08002e98 	.word	0x08002e98
 8002e54:	08002e98 	.word	0x08002e98
 8002e58:	08002e9c 	.word	0x08002e9c

08002e5c <_init>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr

08002e68 <_fini>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	bf00      	nop
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr
